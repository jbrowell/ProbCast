### StrathCast Extended Example
require(devtools)
require(roxygen2)
require(rstudioapi)
PackagePath <- dirname(getActiveDocumentContext()$path)
setwd(PackagePath)
# Install from local repository
install(PackagePath)
Wind$WS100 <- sqrt(Wind$U100^2+Wind$V100^2)
Wind$Power <- pmin(Wind$WS100,9.5)^3 / 9.5^3
# Load Package
require(ProbCast)
Wind$WS100 <- sqrt(Wind$U100^2+Wind$V100^2)
Wind$Power <- pmin(Wind$WS100,9.5)^3 / 9.5^3
## Set-up simple kfold CV. NB --- For scenario forecasting make sure the CV folds don't cross issue times
Wind$kfold <- "Fold 1"
Wind$kfold[Wind$ISSUEdtm>as.POSIXct("2012-06-30",tz="UTC")] <- "Fold 2"
Wind$kfold[Wind$ISSUEdtm>as.POSIXct("2012-12-31",tz="UTC")] <- "Fold 3"
Wind$kfold[Wind$ISSUEdtm>as.POSIXct("2013-06-30",tz="UTC")] <- "Test"
model_rq = qreg_mrq(data=Wind,
formula = TARGETVAR~1+Power,
quantiles = 1:19/20,
offset = "Power",
cv_folds = "kfold",
sort_limits = list(U=1,L=0))
plot(model_rq$mqr_pred[1:100+sample(1:16000,1),])
model_rq$mqr_pred
plot(model_rq$mqr_pred[1:100+sample(1:16000,1),])
plot(model_rq$mqr_pred[1:100+sample(1:16000,1),])
plot(model_rq$mqr_pred[1:100+sample(1:16000,1),])
plot(model_rq$mqr_pred[1:100+sample(1:16000,1),])
plot(model_rq$mqr_pred[1:100+sample(1:16000,1),])
plot(model_rq$mqr_pred[1:100+sample(1:16000,1),])
plot(model_rq$mqr_pred[1:100+sample(1:16000,1),])
plot(model_rq$mqr_pred[1:100+sample(1:16000,1),])
plot(model_rq$mqr_pred[1:100+sample(1:16000,1),])
plot(model_rq$mqr_pred[1:100+sample(1:16000,1),])
plot(model_rq$mqr_pred[1:100+sample(1:16000,1),])
model_rq = qreg_mrq(data=Wind,
formula = TARGETVAR~1+Power+WS100 + WS100*Power,
quantiles = 1:49/50,
offset = "Power",
cv_folds = "kfold",
sort_limits = list(U=1,L=0))
plot(model_rq$mqr_pred[1:100+sample(1:16000,1),])
reliability(qrdata = model_rq$mqr_pred,
realisations = Wind$TARGETVAR,
kfolds = Wind$kfold)
plot(Width~Interval,sharpness(qrdata = model_rq$mqr_pred,
realisations = Wind$TARGETVAR),
type="b")
plot(model_rq$mqr_pred[1:100+sample(1:16000,1),])
plot(model_rq$mqr_pred[1:100+sample(1:16000,1),])
plot(model_rq$mqr_pred[1:100+sample(1:16000,1),])
plot(model_rq$mqr_pred[1:100+sample(1:16000,1),])
model_rq = qreg_mrq(data=Wind,
formula = TARGETVAR~1+Power+WS100 + WS100*Power,
quantiles = 5:45/50,
offset = "Power",
cv_folds = "kfold",
sort_limits = list(U=1,L=0))
plot(model_rq$mqr_pred[1:100+sample(1:16000,1),])
model_rq = qreg_mrq(data=Wind,
formula = TARGETVAR~1+Power+WS100 + WS100*Power,
quantiles = 5:95/100,
offset = "Power",
cv_folds = "kfold",
sort_limits = list(U=1,L=0))
plot(model_rq$mqr_pred[1:100+sample(1:16000,1),])
reliability(qrdata = model_rq$mqr_pred,
realisations = Wind$TARGETVAR,
kfolds = Wind$kfold)
plot(model_rq$mqr_pred[1:100+sample(1:16000,1),])
require(splines)
?bs
model_rq = qreg_mrq(data=Wind,
# formula = TARGETVAR~1+Power+WS100 + WS100*Power,
formula = TARGETVAR~1+bs(WS100,df=10),
quantiles = 5:95/100,
offset = "Power",
cv_folds = "kfold",
sort_limits = list(U=1,L=0))
plot(model_rq$mqr_pred[1:100+sample(1:16000,1),])
plot(model_rq$mqr_pred[1:100+sample(1:16000,1),])
plot(model_rq$mqr_pred[1:100+sample(1:16000,1),])
plot(model_rq$mqr_pred[1:100+sample(1:16000,1),])
plot(model_rq$mqr_pred[1:100+sample(1:16000,1),])
plot(model_rq$mqr_pred[1:100+sample(1:16000,1),])
plot(model_rq$mqr_pred[1:100+sample(1:16000,1),])
plot(model_rq$mqr_pred[1:100+sample(1:16000,1),])
?splines::ns
install.package("splines2")
install.packages("splines2")
require(splines2)
Wind$WD100 <- atan2(Wind$V100,Wind$U100)
Wind$WD100
range(Wind$WD100)
c(-pi,pi)
model_rq = qreg_mrq(data=Wind,
# formula = TARGETVAR~1+Power+WS100 + WS100*Power,
formula = TARGETVAR~1+bSpline(WS100,df=10) +
bSpline(WS100,df=10) +
bSpline(WD100,df = 6,periodic = T,Boundary.knots = c(-pi,pi)),
quantiles = 1:19/20,
offset = "Power",
cv_folds = "kfold",
sort_limits = list(U=1,L=0))
plot(model_rq$mqr_pred[1:100+sample(1:16000,1),])
reliability(qrdata = model_rq$mqr_pred,
realisations = Wind$TARGETVAR,
kfolds = Wind$kfold)
plot(Width~Interval,sharpness(qrdata = model_rq$mqr_pred,
realisations = Wind$TARGETVAR),
type="b")
plot(model_rq$mqr_pred[1:100+sample(1:16000,1),])
plot(model_rq$mqr_pred[1:100+sample(1:16000,1),])
plot(model_rq$mqr_pred[1:100+sample(1:16000,1),])
plot(model_rq$mqr_pred[1:100+sample(1:16000,1),])
plot(model_rq$mqr_pred[1:100+sample(1:16000,1),])
plot(model_rq$mqr_pred[1:100+sample(1:16000,1),])
plot(model_rq$mqr_pred[1:100+sample(1:16000,1),])
plot(model_rq$mqr_pred[1:100+sample(1:16000,1),])
plot(model_rq$mqr_pred[1:100+sample(1:16000,1),])
plot(model_rq$mqr_pred[1:100+sample(1:16000,1),])
mean(abs(model_rq$mqr_pred$q50 - Wind$TARGETVAR))
mean(abs(model_rq$mqr_pred$q50 - Wind$TARGETVAR),na.rm = T)
?bSpline
### Multiple linear quantile regression with MQR_rq
# require(splines2)
model_rq = qreg_mrq(data=Wind,
formula = TARGETVAR~1+Power+WS100,
# formula = TARGETVAR~1+bSpline(WS100,df=10) +
#   bSpline(WS100,df=10) +
#   bSpline(WD100,df = 6,periodic = T,Boundary.knots = c(-pi,pi)),
quantiles = 1:19/20,
offset = "Power",
cv_folds = "kfold",
sort_limits = list(U=1,L=0))
plot(model_rq$mqr_pred[1:100+sample(1:16000,1),])
plot(model_rq$mqr_pred[1:100+sample(1:16000,1),])
mean(abs(model_rq$mqr_pred$q50 - Wind$TARGETVAR),na.rm = T)
reliability(qrdata = model_rq$mqr_pred,
realisations = Wind$TARGETVAR,
kfolds = Wind$kfold)
plot(Width~Interval,sharpness(qrdata = model_rq$mqr_pred,
realisations = Wind$TARGETVAR),
type="b")
pinball(qrdata = model_rq$mqr_pred,
realisations = Wind$TARGETVAR,
kfolds = Wind$kfold)
